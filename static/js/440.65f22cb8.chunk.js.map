{"version":3,"file":"static/js/440.65f22cb8.chunk.js","mappings":"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","sources":["webpack://react-hw-05-movies/./src/components/MovieDetailsPage/MovieDetailsPage.module.css?377f","components/MovieDetailsPage/MovieDetailsPage.jsx","components/services/genres-names.js","components/services/movies-api.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"details\":\"MovieDetailsPage_details__7aDRv\",\"go_back\":\"MovieDetailsPage_go_back__ByNCG\",\"go_back__icon\":\"MovieDetailsPage_go_back__icon__N783T\",\"image_wrapper\":\"MovieDetailsPage_image_wrapper__ibM0R\",\"image\":\"MovieDetailsPage_image__bfvR6\",\"title_wrapper\":\"MovieDetailsPage_title_wrapper__0mFQj\",\"title\":\"MovieDetailsPage_title__MDJ+L\",\"tagline\":\"MovieDetailsPage_tagline__10CJk\",\"info\":\"MovieDetailsPage_info__3IUJv\",\"info__item\":\"MovieDetailsPage_info__item__F8uVy\",\"info__value\":\"MovieDetailsPage_info__value__wlVgy\",\"genres\":\"MovieDetailsPage_genres__HV3uS\",\"overview\":\"MovieDetailsPage_overview__Q2W8b\",\"additional\":\"MovieDetailsPage_additional__BCHVj\",\"additional__button\":\"MovieDetailsPage_additional__button__P-DxX\",\"star\":\"MovieDetailsPage_star__GR5XZ\"};","// Import necessary React hooks and components\nimport { useState, useEffect } from 'react';\nimport { useParams, Outlet, useNavigate, useLocation } from 'react-router-dom';\nimport { fetchMovieDetails } from '../services/movies-api'; // Import a function to fetch movie details\nimport { genresNames } from '../services/genres-names'; // Import a list of genre names\nimport { Link } from 'react-router-dom'; // Import a component for navigation\nimport s from './MovieDetailsPage.module.css'; // Import CSS modules for styling\nimport sprite from '../images/icons.svg'; // Import an SVG sprite for icons\n\n// Define the 'MovieDetailsPage' component as the default export\nexport default function MovieDetailsPage() {\n  // Extract 'movieId' from the URL using the 'useParams' hook\n  const { movieId } = useParams();\n\n  // Define state variables to store movie details, a reference to the previous page, and search parameters\n  const [movie, setMovie] = useState('');\n  const [from, setFrom] = useState(null);\n  const [searchBack, setSearchBack] = useState('');\n\n  // Initialize navigation and location using 'useNavigate' and 'useLocation' hooks\n  const navigate = useNavigate();\n  const { state } = useLocation();\n  // console.log(state);\n\n  // Define options for date formatting\n  const options = { year: 'numeric', month: 'long', day: 'numeric' };\n\n  // Effect to extract the previous page reference and search parameters from location state\n  useEffect(() => {\n    if (state?.from) {\n      const { pathname, search } = state.from;\n      setFrom(pathname);\n      setSearchBack(search);\n    }\n  }, [state?.from]);\n  // In summary, this code captures and remembers the pathname and search properties of the previous route's location using the state.from object.\n  // The use of optional chaining ensures that this code won't throw errors if state.from is undefined, making it a safe way to handle this information.\n\n  // Effect to fetch movie details based on 'movieId' from the URL\n  useEffect(() => {\n    fetchMovieDetails(movieId).then(data => {\n      normalizedData(data); // Call a function to normalize genre data\n      setMovie(data); // Set the 'movie' state with the fetched movie data\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movieId]); // Trigger the effect when 'movieId' changes\n\n  // Function to normalize movie data, specifically genre information\n  function normalizedData(results) {\n    createGenres(genresNames, results.genres); // Call a function to create an array of genre names based on genre IDs\n\n    return results; // Return the normalized movie data\n  }\n\n  // Function to create an array of genre names based on genre IDs\n  function createGenres(arrayID, genresID) {\n    let arrayOfGenres = []; // Initialize an empty array to store genre names\n\n    return arrayID.map(element => {\n      // Use the map function to iterate through genre names\n      if (genresID.includes(element.id)) {\n        // Check if the genre IDs include the current genre\n        arrayOfGenres.push(element.name); // If so, add the genre name to the array\n      }\n\n      return arrayOfGenres; // Return the array of genre names\n    });\n  }\n\n  // Function to handle the \"Go Back\" button\n  function goBackHandle() {\n    if (from === null) {\n      // Check if the 'from' reference is null (no previous page)\n      navigate('/react-hw-05-movies', { replace: true }); // Navigate to the default movies page and replace the current entry\n      return;\n    } else {\n      navigate(`${from}${searchBack}`); // Navigate back to the previous page with search parameters\n    }\n  }\n\n  // Function to convert movie runtime to a human-readable format\n  function timeConvert(time) {\n    let duration = time; // Store the duration in minutes\n    let hours = duration / 60; // Convert minutes to hours\n    let roundedHours = Math.floor(hours); // Round down to get the whole hours\n    let minutes = (hours - roundedHours) * 60; // Calculate the remaining minutes\n    let roundedMinutes = Math.round(minutes); // Round minutes to the nearest whole number\n    let hoursText =\n      roundedHours === 1 ? `${roundedHours} hour ` : `${roundedHours} hours `; // Check if there's only 1 hour\n    let minutesText =\n      roundedMinutes === 1\n        ? `${roundedMinutes} minute`\n        : `${roundedMinutes} minutes`; // Check if there's only 1 minute\n\n    if (roundedHours === 0) {\n      hoursText = ''; // If there are no whole hours, set the hours text to an empty string\n    }\n    if (roundedMinutes === 0) {\n      minutesText = ''; // If there are no whole minutes, set the minutes text to an empty string\n    }\n\n    return hoursText + minutesText; // Return the formatted duration as a string\n  }\n\n  return (\n    <>\n      {movie && ( // Render the following only if 'movie' is available\n        <div className={s.details}>\n          <div className={s.image_wrapper}>\n            {movie.poster_path ? ( // Check if 'poster_path' exists\n              <img\n                src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n                alt={movie.original_title}\n                className={s.image}\n              />\n            ) : (\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n                alt={movie.original_title}\n                className={s.image}\n              />\n            )}\n\n            <button onClick={goBackHandle} className={s.go_back}>\n              <svg\n                className={s.go_back__icon}\n                width=\"16\"\n                height=\"16\"\n                aria-label=\"logo\"\n              >\n                <use href={`${sprite}#arrow-back`}></use>\n                {/* Display an SVG icon for \"Go Back\" --> */}\n              </svg>\n            </button>\n          </div>\n\n          <div className={s.description}>\n            <div className={s.title_wrapper}>\n              <h2 className={s.title}>{movie.original_title}</h2>\n              {/* Display the movie title */}\n              {movie.tagline !== '' ? ( // Check if 'tagline' exists and is not empty\n                <p className={s.tagline}>\"{movie.tagline}\"</p>\n              ) : (\n                //  Display the movie tagline if available\n                ''\n              )}\n            </div>\n            <ul className={s.info}>\n              {movie.vote_average !== 0 ? ( // Check if 'vote_average' is not zero\n                <li className={s.info__item}>\n                  User Score:{' '}\n                  <span className={s.info__value}>\n                    <span className={s.star}>\n                      <i className=\"fa fa-star-o\"></i>\n                      {/* Display a star icon for user score */}\n                    </span>\n                    &#160;{movie.vote_average}\n                    {/* Display the user score value */}\n                  </span>\n                </li>\n              ) : (\n                <li className={s.info__item}>\n                  User Score:{' '}\n                  <span className={s.info__value}>\n                    <span className={s.star}>\n                      <i className=\"fa fa-star-o\"></i>\n                      {/* Display a star icon for user score */}\n                    </span>\n                    &#160;--\n                  </span>\n                </li>\n              )}\n              {movie.release_date !== '' ? ( // Check if 'release_date' exists and is not empty\n                <li className={s.info__item}>\n                  Release date:{' '}\n                  <span className={s.info__value}>\n                    {new Date(movie.release_date).toLocaleDateString(\n                      'en-US',\n                      options\n                    )}\n                    {/* Display the formatted release date */}\n                  </span>\n                </li>\n              ) : (\n                <li className={s.info__item}>\n                  Release date: <span className={s.info__value}>--</span>\n                  {/* Display '--' if release date is not available */}\n                </li>\n              )}\n              {movie.budget !== 0 ? ( // Check if 'budget' is not zero\n                <li className={s.info__item}>\n                  Budget:{' '}\n                  <span className={s.info__value}>\n                    ${movie.budget.toLocaleString()}\n                    {/* Display the budget in USD format */}\n                  </span>\n                </li>\n              ) : (\n                ''\n              )}\n              {movie.revenue !== 0 ? ( // Check if 'revenue' is not zero\n                <li className={s.info__item}>\n                  Revenue:{' '}\n                  <span className={s.info__value}>\n                    ${movie.revenue.toLocaleString()}\n                    {/* Display the revenue in USD format */}\n                  </span>\n                </li>\n              ) : (\n                ''\n              )}\n              {movie.runtime !== 0 ? ( // Check if 'runtime' is not zero\n                <li className={s.info__item}>\n                  Runtime:{' '}\n                  <span className={s.info__value}>\n                    {timeConvert(movie.runtime)}\n                    {/* Display the runtime in a human-readable format */}\n                  </span>\n                </li>\n              ) : (\n                ''\n              )}\n              <li className={s.info__item}>\n                Genres:{' '}\n                <ul className={s.genres}>\n                  {movie.genres.length > 0 ? ( // Check if 'genres' array is not empty\n                    movie.genres.map(({ id, name }, index) => (\n                      <li className={s.genres__item} key={id}>\n                        {(index ? ', ' : '') + name}\n                        {/* Display genre names with comma separation */}\n                      </li>\n                    ))\n                  ) : (\n                    <p className={s.genres__item}>Other</p>\n                    // Display 'Other' if no genres are available\n                  )}\n                </ul>\n              </li>\n            </ul>\n\n            <p className={s.overview}>{movie.overview}</p>\n            {/* Display the movie overview */}\n\n            <div className={s.additional}>\n              <Link\n                to={`/react-hw-05-movies/movies/${movieId}/cast`}\n                className={s.additional__button}\n              >\n                Cast\n                {/* Link to the Cast page */}\n              </Link>\n              <Link\n                to={`/react-hw-05-movies/movies/${movieId}/reviews`}\n                className={s.additional__button}\n              >\n                Reviews\n                {/* Link to the Reviews page */}\n              </Link>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <Outlet />\n    </>\n  );\n}\n\n// This module defines a React component called MovieDetailsPage that is responsible for displaying detailed information about a movie. Here's a summary of what this module does:\n// Import necessary React hooks and components.\n// Extract information about the movie and the previous route's location.\n// Define state variables for movie details, a reference to the previous page, and search parameters.\n// Initialize navigation and location hooks for routing.\n// Define options for date formatting.\n// Use an effect to extract and store information about the previous page and search parameters from the location state.\n// Use an effect to fetch movie details based on the movieId from the URL.\n// Define functions to normalize movie data, create an array of genre names, handle the \"Go Back\" button, and convert movie runtime to a human-readable format.\n// Render the movie details, including the poster, title, tagline, user score, release date, budget, revenue, runtime, genres, overview, and additional links for Cast and Reviews.\n// Use optional rendering (conditional rendering) to ensure that movie details are only displayed when the movie data is available.\n// Render an SVG icon for the \"Go Back\" button.\n// Render the child components or content from nested routes using <Outlet />.\n// In summary, this module is a React component that displays detailed information about a movie, handles routing, and provides user-friendly formatting for various movie details.\n","export const genresNames = [\n  {\n    id: 28,\n    name: 'Action',\n  },\n  {\n    id: 12,\n    name: 'Adventure',\n  },\n  {\n    id: 16,\n    name: 'Animation',\n  },\n  {\n    id: 35,\n    name: 'Comedy',\n  },\n  {\n    id: 80,\n    name: 'Crime',\n  },\n  {\n    id: 99,\n    name: 'Documentary',\n  },\n  {\n    id: 18,\n    name: 'Drama',\n  },\n  {\n    id: 10751,\n    name: 'Family',\n  },\n  {\n    id: 14,\n    name: 'Fantasy',\n  },\n  {\n    id: 36,\n    name: 'History',\n  },\n  {\n    id: 27,\n    name: 'Horror',\n  },\n  {\n    id: 10402,\n    name: 'Music',\n  },\n  {\n    id: 9648,\n    name: 'Mystery',\n  },\n  {\n    id: 10749,\n    name: 'Romance',\n  },\n  {\n    id: 878,\n    name: 'Science Fiction',\n  },\n  {\n    id: 10770,\n    name: 'TV Movie',\n  },\n  {\n    id: 53,\n    name: 'Thriller',\n  },\n  {\n    id: 10752,\n    name: 'War',\n  },\n  {\n    id: 37,\n    name: 'Western',\n  },\n];","// Define the base URL for making API requests\nconst BASE_URL = 'https://api.themoviedb.org/3';\n// Define the API key to be used in API requests\nconst API_KEY = '?api_key=256931b667b455c0d040d58938728ff6';\n\n// Define a generic function for making API requests with error handling\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  // Send a request to the specified URL with the given configuration\n  const response = await fetch(url, config);\n  // Check if the response status is okay (HTTP status code 200)\n  return response.ok\n    ? await response.json() // If the response is okay, parse and return JSON\n    : Promise.reject(new Error('Not found')); // If not okay, reject the promise with an error\n}\n\n// Function to fetch trending movies\nexport function fetchTrendingMovies(page = '1') {\n  // Define the path parameters for trending movies\n  const PATH_PARAMS = '/trending/movie/week';\n  // Make an API request to fetch trending movies using the provided page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`\n  );\n}\n\n// Function to fetch movies based on a search query\nexport function fetchMovies(searchQuery, page = '1') {\n  // Define the path parameters for searching movies\n  const PATH_PARAMS = '/search/movie';\n  // Define additional search parameters for language and adult content\n  const searchParams = '&language=en-US&include_adult=false';\n  // Make an API request to search for movies based on the provided query and page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${API_KEY}&query=${searchQuery}&page=${page}${searchParams}`\n  );\n}\n\n// Function to fetch details of a specific movie\nexport function fetchMovieDetails(movie_id) {\n  // Define the path parameters for fetching movie details\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch details of the specified movie\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${searchParams}`\n  );\n}\n\n// Function to fetch credits (cast and crew) of a specific movie\nexport function fetchMovieCredits(movie_id) {\n  // Define the path parameters for fetching movie credits\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch credits of the specified movie\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${searchParams}`\n  );\n}\n\n// Function to fetch reviews of a specific movie\nexport function fetchMovieReviews(movie_id, page = '1') {\n  // Define the path parameters for fetching movie reviews\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch reviews of the specified movie with the provided page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${searchParams}&page=${page}`\n  );\n}\n//This module provides functions for making various requests to The Movie Database (TMDb) API, such as fetching trending movies, searching for movies, retrieving movie details, credits, and reviews.\n//The fetchWithErrorHandling function is a common utility used for handling API requests and error responses.Each function is tailored to a specific type of API request and includes necessary parameters and search options.\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["MovieDetailsPage","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movie","setMovie","_useState3","_useState4","from","setFrom","_useState5","_useState6","searchBack","setSearchBack","navigate","useNavigate","state","useLocation","useEffect","_state$from","pathname","search","fetchMovieDetails","then","data","results","arrayID","genresID","arrayOfGenres","map","element","includes","id","push","name","createGenres","genresNames","genres","_jsxs","_Fragment","children","className","s","poster_path","_jsx","src","concat","alt","original_title","onClick","replace","width","height","href","sprite","tagline","vote_average","release_date","Date","toLocaleDateString","year","month","day","budget","toLocaleString","revenue","runtime","time","hours","roundedHours","Math","floor","minutes","roundedMinutes","round","hoursText","minutesText","timeConvert","length","_ref","index","overview","Link","to","Outlet","BASE_URL","API_KEY","fetchWithErrorHandling","_fetchWithErrorHandling","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","url","config","response","_args","_context","prev","next","undefined","fetch","sent","ok","json","t0","Promise","reject","Error","abrupt","stop","fetchTrendingMovies","page","PATH_PARAMS","fetchMovies","searchQuery","searchParams","movie_id","fetchMovieCredits","fetchMovieReviews","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","error","done","fn","self","this","args","err"],"sourceRoot":""}