{"version":3,"file":"static/js/422.c20f09ca.chunk.js","mappings":"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","sources":["webpack://react-hw-05-movies/./src/components/MovieDetailsPage/Cast/Cast.module.css?055e","components/MovieDetailsPage/Cast/Cast.jsx","components/services/movies-api.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast\":\"Cast_cast__5fcZC\",\"item\":\"Cast_item__66r1U\",\"link\":\"Cast_link__OG02T\",\"name\":\"Cast_name__aLctn\",\"image_wrapper\":\"Cast_image_wrapper__U2rub\",\"image\":\"Cast_image__1PkfW\",\"name_wrapper\":\"Cast_name_wrapper__CcpQr\",\"character\":\"Cast_character__QND9j\"};","// Import necessary dependencies and components\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from '../../services/movies-api';\nimport s from './Cast.module.css';\n\n// Define the 'Cast' component as the default export\nexport default function Cast() {\n  // Extract the 'movieId' parameter from the URL using the 'useParams' hook\n  const { movieId } = useParams();\n\n  // Define the 'cast' state variable and a 'setCast' function to manage a list of cast members\n  const [cast, setCast] = useState([]);\n\n  // Use the 'useEffect' hook to perform side effects when the component is mounted\n  useEffect(() => {\n    // Call the 'fetchMovieCredits' function to fetch movie cast data for the specified 'movieId'\n    fetchMovieCredits(movieId).then(data => {\n      // Set the 'cast' state with the cast data received from the API\n      setCast(data.cast);\n    });\n  }, [movieId]);\n\n  // Return JSX for rendering\n  return (\n    <>\n      {cast && (\n        // Render a list of cast members if 'cast' data is available\n        <ul className={s.cast}>\n          {cast.map(({ id, character, original_name, profile_path }) => (\n            <li className={s.item} key={id}>\n              <a\n                className={s.link}\n                href={`https://www.google.com/search?q=${original_name\n                  .split(' ')\n                  .join('+')}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <div className={s.image_wrapper}>\n                  {profile_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                      alt={original_name}\n                      className={s.image}\n                    />\n                  ) : (\n                    <img\n                      src=\"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n                      alt={original_name}\n                      className={s.image}\n                    />\n                  )}\n                </div>\n                <div className={s.name_wrapper}>\n                  <p className={s.name}>{original_name}</p>\n                  <p className={s.character}>{character}</p>\n                </div>\n              </a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\n// In summary, this code is a React component that fetches and displays the cast members of a movie based on the 'movieId' parameter extracted from the URL.\n//  It uses React hooks for state management and side effects and renders the cast information with appropriate styling.\n","// Define the base URL for making API requests\nconst BASE_URL = 'https://api.themoviedb.org/3';\n// Define the API key to be used in API requests\nconst API_KEY = '?api_key=256931b667b455c0d040d58938728ff6';\n\n// Define a generic function for making API requests with error handling\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  // Send a request to the specified URL with the given configuration\n  const response = await fetch(url, config);\n  // Check if the response status is okay (HTTP status code 200)\n  return response.ok\n    ? await response.json() // If the response is okay, parse and return JSON\n    : Promise.reject(new Error('Not found')); // If not okay, reject the promise with an error\n}\n\n// Function to fetch trending movies\nexport function fetchTrendingMovies(page = '1') {\n  // Define the path parameters for trending movies\n  const PATH_PARAMS = '/trending/movie/week';\n  // Make an API request to fetch trending movies using the provided page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`\n  );\n}\n\n// Function to fetch movies based on a search query\nexport function fetchMovies(searchQuery, page = '1') {\n  // Define the path parameters for searching movies\n  const PATH_PARAMS = '/search/movie';\n  // Define additional search parameters for language and adult content\n  const searchParams = '&language=en-US&include_adult=false';\n  // Make an API request to search for movies based on the provided query and page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${API_KEY}&query=${searchQuery}&page=${page}${searchParams}`\n  );\n}\n\n// Function to fetch details of a specific movie\nexport function fetchMovieDetails(movie_id) {\n  // Define the path parameters for fetching movie details\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch details of the specified movie\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${searchParams}`\n  );\n}\n\n// Function to fetch credits (cast and crew) of a specific movie\nexport function fetchMovieCredits(movie_id) {\n  // Define the path parameters for fetching movie credits\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch credits of the specified movie\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${searchParams}`\n  );\n}\n\n// Function to fetch reviews of a specific movie\nexport function fetchMovieReviews(movie_id, page = '1') {\n  // Define the path parameters for fetching movie reviews\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch reviews of the specified movie with the provided page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${searchParams}&page=${page}`\n  );\n}\n//This module provides functions for making various requests to The Movie Database (TMDb) API, such as fetching trending movies, searching for movies, retrieving movie details, credits, and reviews.\n//The fetchWithErrorHandling function is a common utility used for handling API requests and error responses.Each function is tailored to a specific type of API request and includes necessary parameters and search options.\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["Cast","movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","useEffect","fetchMovieCredits","then","data","_jsx","_Fragment","children","className","s","map","_ref","id","character","original_name","profile_path","_jsxs","href","concat","split","join","target","rel","src","alt","BASE_URL","API_KEY","fetchWithErrorHandling","_fetchWithErrorHandling","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","url","config","response","_args","_context","prev","next","length","undefined","fetch","sent","ok","json","t0","Promise","reject","Error","abrupt","stop","fetchTrendingMovies","page","PATH_PARAMS","fetchMovies","searchQuery","searchParams","fetchMovieDetails","movie_id","fetchMovieReviews","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","error","done","fn","self","this","args","err"],"sourceRoot":""}