{"version":3,"file":"static/js/736.51868427.chunk.js","mappings":"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","sources":["webpack://react-hw-05-movies/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://react-hw-05-movies/./src/components/MoviesListItem/MoviesListItem.module.css?7daa","components/MoviesListItem/MoviesListItem.jsx","webpack://react-hw-05-movies/./src/components/MoviesPage/SearchField/SearchField.module.css?8a9e","components/MoviesPage/SearchField/SearchField.jsx","components/MoviesPage/MoviesSearchList/MoviesSearchList.jsx","components/MoviesPage/MoviesPage.jsx","components/services/genres-names.js","components/services/movies-api.js","components/services/normalized-data.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"gallery\":\"MoviesList_gallery__Nw0Bb\"};","import s from './MoviesList.module.css'; // Import styles from the 'MoviesList.module.css' file\n\nexport default function MoviesList({ children }) {\n  return (\n    <ul className={s.gallery}>\n      {/* Render an unordered list with a CSS class 'gallery' */}\n      {children} {/* Render the children components within the list */}\n    </ul>\n  );\n}\n// This code defines a React component called MoviesList that renders an unordered list (<ul>) with the class gallery.\n//  It takes a children prop, which represents the components or elements that should be rendered inside the list.\n//  The component is styled using CSS styles defined in the 'MoviesList.module.css' file.\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MoviesListItem_item__4rNsZ\",\"title\":\"MoviesListItem_title__sM-ZN\",\"link\":\"MoviesListItem_link__cb8vw\",\"image_wrapper\":\"MoviesListItem_image_wrapper__Qy8Mw\",\"description\":\"MoviesListItem_description__nf87f\",\"genres\":\"MoviesListItem_genres__QPD00\",\"genres__item\":\"MoviesListItem_genres__item__FsD7V\",\"info\":\"MoviesListItem_info__dxW6k\",\"rating\":\"MoviesListItem_rating__DRQ+7\"};","import PropTypes from 'prop-types'; // Import PropTypes for prop type validation\nimport { Link, useLocation } from 'react-router-dom'; // Import React Router components\nimport s from './MoviesListItem.module.css'; // Import CSS modules for styling\n\nexport default function MoviesListItem({ data }) {\n  // Extract and define the 'data' prop\n  const location = useLocation(); // Get the current location using 'useLocation' hook\n  const query = new URLSearchParams(location.search).get('query') ?? ''; // Extract the 'query' parameter from the URL\n\n  return data.map(\n    ({ title, id, poster_path, genres, release_date, vote_average }) => (\n      // Map over the movie data and render each item\n      <li className={s.item} key={id}>\n        {/* Create a list item with a unique 'id' as the key */}\n        <Link\n          to={`/react-hw-05-movies/movies/${id}`}\n          state={{ from: location, search: query }}\n          className={s.link}\n        >\n          {/* Create a link to the movie details page */}\n          <div className={s.image_wrapper}>\n            {/* Create a wrapper for the movie poster */}\n            {poster_path ? ( // Check if 'poster_path' exists\n              <img\n                src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                alt={title}\n                className={s.image}\n              />\n            ) : (\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n                alt={title}\n                className={s.image}\n              />\n            )}\n          </div>\n          <div className={s.description}>\n            {/* Create a description container for movie details */}\n            <h3 className={s.title}>{title}</h3>\n            {/* Display the movie title */}\n            <ul className={s.genres}>\n              {/* Create a list for movie genres */}\n              {genres.length > 0 ? ( // Check if there are genres\n                genres.map(({ id, name }, index) => (\n                  <li className={s.genres__item} key={id}>\n                    {(index ? ', ' : '') + name}\n                    {/* This code generates a comma-separated list of genre names. The index parameter is used to determine if a comma should be added. If it's the first genre in the list (index === 0), no comma is added.\n                     For subsequent genres, a comma and space are added to separate them. */}\n                  </li>\n                ))\n              ) : (\n                <p className={s.genres__item}>Other</p>\n                // If there are no genres (genres.length > 0 is false), it renders a fallback message.\n                //  In this case, it renders a paragraph (<p>) with the text \"Other.\"\n              )}\n            </ul>\n            <p className={s.info}>\n              {/* Create a container for additional information */}\n              {vote_average !== 0 ? ( // Check if 'vote_average' is not zero\n                <span className={s.rating}>\n                  <i className=\"fa fa-star-o\"></i>&#160;{vote_average}\n                  {/* This code creates a star icon with  Font Awesome library,followed by the value of vote_average to indicate the movie's rating */}\n                </span>\n              ) : (\n                <span className={s.rating}>\n                  <i className=\"fa fa-star-o\"></i>&#160;--\n                </span>\n              )}\n              {release_date !== '' ? ( // Check if 'release_date' exists\n                <span className={s.date}>{parseInt(release_date)}</span>\n              ) : (\n                <span className={s.date}>--</span>\n              )}\n            </p>\n          </div>\n        </Link>\n      </li>\n    )\n  );\n}\n\nMoviesListItem.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired, // Ensure 'id' is a number and is required\n      title: PropTypes.string.isRequired, // Ensure 'title' is a string and is required\n    })\n  ),\n};\n\n// This module defines a React component called MoviesListItem. It receives a data prop, which is an array of movie data. It maps over this data and renders a list item for each movie with details such as title, poster, genres, rating, and release date. Additionally, it handles routing by providing a link to the movie details page.\n// The PropTypes at the end of the module define the expected shape of the data prop, specifying that it should be an array of objects with id (a number) and title (a string) properties.\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchField_form__X+C6Z\",\"input\":\"SearchField_input__pGwyh\",\"button\":\"SearchField_button__RaTD9\",\"icon\":\"SearchField_icon__EAryr\"};","// Import necessary modules and components\nimport { useState } from 'react'; // Import the 'useState' hook from React\nimport s from './SearchField.module.css'; // Import CSS modules for styling\nimport { toast } from 'react-toastify'; // Import the 'toast' component from 'react-toastify'\nimport sprite from '../../images/icons.svg'; // Import an SVG sprite for icons\n\n// Define the 'SearchField' component as the default export\nfunction SearchField(props) {\n  // Define state to store the search query input\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Handle changes in the search query input\n  const handleSearchQueryChange = event => {\n    setSearchQuery(event.currentTarget.value.toLowerCase()); // Convert input to lowercase and update the state\n  };\n\n  // Handle the form submission\n  const handleSubmit = event => {\n    event.preventDefault(); // Prevent the default form submission behavior\n\n    if (searchQuery.trim() === '') {\n      setSearchQuery(''); // Clear the search query input\n      return toast.info('Input your search query'); // Display an informational toast message\n    }\n\n    props.onSubmit(searchQuery); // Call the 'onSubmit' function with the search query\n    setSearchQuery(''); // Clear the search query input\n  };\n\n  // Render the search input form\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <input\n        className={s.input}\n        type=\"text\"\n        autoComplete=\"off\"\n        name=\"searchQuery\"\n        placeholder=\"Search movie...\"\n        value={searchQuery}\n        onChange={handleSearchQueryChange}\n      />\n\n      <button type=\"submit\" className={s.button}>\n        <svg className={s.icon} width=\"16\" height=\"16\" aria-label=\"logo\">\n          <use href={`${sprite}#search`}></use>\n        </svg>\n      </button>\n    </form>\n  );\n}\n\nexport default SearchField; // Export the 'SearchField' component as the default export\n\n// This module defines a React component called `SearchField` for handling movie search queries.\n//  It provides an input field where users can type their search queries and a submit button.The component uses the `useState` hook to manage the search query's state. When a user submits the form, the component calls a provided `onSubmit` function with the search query. Additionally, it includes CSS styling, imports the `toast` component for displaying messages, and uses an SVG sprite for an icon.\n","// Import necessary modules and components\nimport PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { fetchMovies } from '../../services/movies-api'; // Import a function to fetch movies\nimport MoviesList from 'components/MoviesList/MoviesList'; // Import the MoviesList component\nimport MoviesListItem from '../../MoviesListItem/MoviesListItem'; // Import the MoviesListItem component\nimport normalizedData from '../../services/normalized-data'; // Import a function for normalizing data\nimport { toast } from 'react-toastify'; // Import the toast notification library\n\n// Define the 'MoviesSearchList' component as the default export\nexport default function MoviesSearchList({ searchQuery }) {\n  // Define state to store the list of movies\n  const [movies, setMovies] = useState([]);\n\n  // Effect to fetch and display movies based on the search query\n  useEffect(() => {\n    if (searchQuery === '') {\n      return; // Do nothing if the search query is empty\n    }\n\n    // Fetch movies based on the search query\n    fetchMovies(searchQuery).then(data => {\n      if (data.total_results > 0) {\n        // If there are search results, normalize and set the movie data\n        setMovies(normalizedData(data.results));\n      } else {\n        // If no results, clear the list and show an error message using toast\n        setMovies([]);\n        return toast.error(\n          'Sorry, there are no movies matching your search query. Please try again.'\n        );\n      }\n    });\n  }, [searchQuery]);\n\n  // Return the MoviesList component with MoviesListItem to display the movies\n  return (\n    <MoviesList>\n      <MoviesListItem data={movies} />\n    </MoviesList>\n  );\n}\n\n// Define the propTypes for the 'MoviesSearchList' component\nMoviesSearchList.propTypes = {\n  searchQuery: PropTypes.string,\n};\n\n// In summary, this code defines a React component called MoviesSearchList.\n// This component takes a searchQuery prop and fetches a list of movies based on the query.\n// If there are search results, it normalizes the data and displays the movies.\n// If there are no results, it shows an error message using the toast library.\n// The component uses the MoviesList and MoviesListItem components to render the list of movies\n","import { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport SearchField from './SearchField/SearchField';\nimport MoviesSearchList from './MoviesSearchList/MoviesSearchList';\nimport { toast } from 'react-toastify';\n\nexport default function MoviesPage() {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Catching search query from address bar\n  const navigate = useNavigate();\n  const location = useLocation();\n  const query = new URLSearchParams(location.search).get('query') ?? '';\n\n  // Catching search query from search bar input field\n  const handleSubmit = searchQueryValue => {\n    if (searchQuery === searchQueryValue) {\n      return toast.info('Input new search query.');\n    }\n\n    navigate(`${location.pathname}?query=${searchQueryValue}`);\n\n    setSearchQuery(searchQueryValue);\n  };\n\n  // Setting search query from address bar\n  useEffect(() => {\n    if (query !== '') {\n      setSearchQuery(query);\n    }\n  }, [query]);\n\n  return (\n    <>\n      {/* Render the SearchField component and provide the handleSubmit function */}\n      <SearchField onSubmit={handleSubmit} />\n\n      {/* Render the MoviesSearchList component and pass the current searchQuery */}\n      <MoviesSearchList searchQuery={searchQuery} />\n    </>\n  );\n}\n// This module manages movie search functionality.\n// It imports various hooks and components for routing, searching, and displaying movies.\n// The component uses the useState hook to manage the search query's state and useNavigate and useLocation for handling routing.\n// It provides a SearchField component for inputting search queries and a MoviesSearchList component to display search results.\n// The code also handles query parameters from the URL and updates the search query state accordingly.\n// Toast messages are displayed for user notifications during the search process.\n","export const genresNames = [\n  {\n    id: 28,\n    name: 'Action',\n  },\n  {\n    id: 12,\n    name: 'Adventure',\n  },\n  {\n    id: 16,\n    name: 'Animation',\n  },\n  {\n    id: 35,\n    name: 'Comedy',\n  },\n  {\n    id: 80,\n    name: 'Crime',\n  },\n  {\n    id: 99,\n    name: 'Documentary',\n  },\n  {\n    id: 18,\n    name: 'Drama',\n  },\n  {\n    id: 10751,\n    name: 'Family',\n  },\n  {\n    id: 14,\n    name: 'Fantasy',\n  },\n  {\n    id: 36,\n    name: 'History',\n  },\n  {\n    id: 27,\n    name: 'Horror',\n  },\n  {\n    id: 10402,\n    name: 'Music',\n  },\n  {\n    id: 9648,\n    name: 'Mystery',\n  },\n  {\n    id: 10749,\n    name: 'Romance',\n  },\n  {\n    id: 878,\n    name: 'Science Fiction',\n  },\n  {\n    id: 10770,\n    name: 'TV Movie',\n  },\n  {\n    id: 53,\n    name: 'Thriller',\n  },\n  {\n    id: 10752,\n    name: 'War',\n  },\n  {\n    id: 37,\n    name: 'Western',\n  },\n];","// Define the base URL for making API requests\nconst BASE_URL = 'https://api.themoviedb.org/3';\n// Define the API key to be used in API requests\nconst API_KEY = '?api_key=256931b667b455c0d040d58938728ff6';\n\n// Define a generic function for making API requests with error handling\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  // Send a request to the specified URL with the given configuration\n  const response = await fetch(url, config);\n  // Check if the response status is okay (HTTP status code 200)\n  return response.ok\n    ? await response.json() // If the response is okay, parse and return JSON\n    : Promise.reject(new Error('Not found')); // If not okay, reject the promise with an error\n}\n\n// Function to fetch trending movies\nexport function fetchTrendingMovies(page = '1') {\n  // Define the path parameters for trending movies\n  const PATH_PARAMS = '/trending/movie/week';\n  // Make an API request to fetch trending movies using the provided page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`\n  );\n}\n\n// Function to fetch movies based on a search query\nexport function fetchMovies(searchQuery, page = '1') {\n  // Define the path parameters for searching movies\n  const PATH_PARAMS = '/search/movie';\n  // Define additional search parameters for language and adult content\n  const searchParams = '&language=en-US&include_adult=false';\n  // Make an API request to search for movies based on the provided query and page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${API_KEY}&query=${searchQuery}&page=${page}${searchParams}`\n  );\n}\n\n// Function to fetch details of a specific movie\nexport function fetchMovieDetails(movie_id) {\n  // Define the path parameters for fetching movie details\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch details of the specified movie\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${searchParams}`\n  );\n}\n\n// Function to fetch credits (cast and crew) of a specific movie\nexport function fetchMovieCredits(movie_id) {\n  // Define the path parameters for fetching movie credits\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch credits of the specified movie\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${searchParams}`\n  );\n}\n\n// Function to fetch reviews of a specific movie\nexport function fetchMovieReviews(movie_id, page = '1') {\n  // Define the path parameters for fetching movie reviews\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch reviews of the specified movie with the provided page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${searchParams}&page=${page}`\n  );\n}\n//This module provides functions for making various requests to The Movie Database (TMDb) API, such as fetching trending movies, searching for movies, retrieving movie details, credits, and reviews.\n//The fetchWithErrorHandling function is a common utility used for handling API requests and error responses.Each function is tailored to a specific type of API request and includes necessary parameters and search options.\n","// Import a list of genre names\nimport { genresNames } from './genres-names';\n\n// This function takes an array of movie results and enhances their presentation.\nexport default function normalizedData(results) {\n  return results.map(movie => {\n    // Create an array of genre names using the createGenres function\n    const genres = createGenres(genresNames, movie.genre_ids);\n    // Get the first 3 genre names (or fewer) for display\n    let listOfGenres = genres[0];\n\n    // If there are more than 3 genres, combine the remaining genres into a single \"Other\" category\n    if (listOfGenres.length > 3) {\n      // Remove the 3rd to 7th genres from the list\n      listOfGenres.splice(2, 5);\n\n      // Create an \"Other\" genre object with an ID of 777\n      let other = {\n        id: 777,\n        name: 'Other',\n      };\n\n      // Add the \"Other\" genre to the list\n      listOfGenres.push(other);\n    }\n\n    // Create an object with the movie's data, including the enhanced genre list\n    let objData = {\n      ...movie,\n      genres: listOfGenres,\n    };\n\n    return objData;\n  });\n}\n\n// This function takes an array of genre names and a list of genre IDs and filters out matching genres.\nfunction createGenres(arrayID, genresID) {\n  let arrayOfGenres = [];\n  return arrayID.map(element => {\n    // Check if the genre IDs include the current genre\n    if (genresID.includes(element.id)) {\n      // Add the matching genre to the list\n      arrayOfGenres.push(element);\n    }\n    return arrayOfGenres;\n  });\n}\n// This module defines two functions, normalizedData and createGenres. normalizedData enhances the presentation of movie data by handling genre names and grouping genres into an \"Other\" category when there are more than 3.\n//  createGenres filters out genres based on their IDs.If this module were not used, you would have to work with the raw, unmodified movie data, which might be less user - friendly and less informative\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["MoviesList","_ref","children","_jsxs","className","s","MoviesListItem","_URLSearchParams$get","data","location","useLocation","query","URLSearchParams","search","get","map","_ref2","title","id","poster_path","genres","release_date","vote_average","_jsx","Link","to","concat","state","from","src","alt","length","_ref3","index","name","parseInt","props","_useState","useState","_useState2","_slicedToArray","searchQuery","setSearchQuery","onSubmit","event","preventDefault","trim","toast","type","autoComplete","placeholder","value","onChange","currentTarget","toLowerCase","width","height","href","sprite","MoviesSearchList","movies","setMovies","useEffect","fetchMovies","then","total_results","normalizedData","results","MoviesPage","navigate","useNavigate","_Fragment","SearchField","searchQueryValue","pathname","genresNames","BASE_URL","API_KEY","fetchWithErrorHandling","_fetchWithErrorHandling","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","url","config","response","_args","_context","prev","next","undefined","fetch","sent","ok","json","t0","Promise","reject","Error","abrupt","stop","fetchTrendingMovies","page","PATH_PARAMS","searchParams","fetchMovieDetails","movie_id","fetchMovieCredits","fetchMovieReviews","movie","listOfGenres","arrayID","genresID","arrayOfGenres","element","includes","push","createGenres","genre_ids","splice","_objectSpread","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","error","done","fn","self","this","args","err"],"sourceRoot":""}