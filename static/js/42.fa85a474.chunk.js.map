{"version":3,"file":"static/js/42.fa85a474.chunk.js","mappings":"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","sources":["webpack://react-hw-05-movies/./src/components/MovieDetailsPage/Reviews/Reviews.module.css?1017","components/MovieDetailsPage/Reviews/Reviews.jsx","components/services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviews\":\"Reviews_reviews__c1EnG\",\"reviews__item\":\"Reviews_reviews__item__cYY4C\",\"author_info\":\"Reviews_author_info__aNV4-\",\"avatar\":\"Reviews_avatar__H0LyA\",\"author\":\"Reviews_author__ANsjv\",\"date\":\"Reviews_date__H5PJL\",\"read_more_less__more\":\"Reviews_read_more_less__more__UhOHF\",\"read_more_less__less\":\"Reviews_read_more_less__less__WeL9k\"};","// Import necessary dependencies and components\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from '../../services/movies-api';\nimport ReactReadMoreReadLess from 'react-read-more-read-less';\nimport s from './Reviews.module.css';\n\n// Define the 'Reviews' component as the default export\nexport default function Reviews() {\n  // Extract the 'movieId' parameter from the URL using the 'useParams' hook\n  const { movieId } = useParams();\n\n  // Define the 'reviews' state variable and a 'setReviews' function to manage a list of reviews\n  const [reviews, setReviews] = useState([]);\n\n  // Options for formatting the review date and time\n  const options = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n  };\n\n  // Use the 'useEffect' hook to perform side effects when the component is mounted\n  useEffect(() => {\n    // Call the 'fetchMovieReviews' function to fetch movie reviews data for the specified 'movieId'\n    fetchMovieReviews(movieId).then(data => {\n      // Set the 'reviews' state with the review data received from the API\n      setReviews(data.results);\n    });\n  }, [movieId]);\n\n  // Function to handle the avatar path for authors\n  function avatarHandler(avatar) {\n    return avatar.includes('https')\n      ? avatar.substring(1)\n      : `https://image.tmdb.org/t/p/w500${avatar}`;\n  }\n  // n summary, the avatarHandler function is used to standardize the format of avatar image URLs.\n  //    It checks whether the URL is an external one, and if it is, it trims the first character(if necessary).If the URL is not external, it constructs a full URL based on the base URL and the provided avatar path.\n  // This function ensures that the src attribute of the image element receives a valid and consistent URL for displaying avatars.\n\n  // Return JSX for rendering\n  return (\n    <>\n      {reviews.length > 0 ? (\n        // Render a list of reviews if 'reviews' data is available\n        <ul className={s.reviews}>\n          {reviews.map(\n            ({ id, author, content, author_details, created_at }) => (\n              <li className={s.reviews__item} key={id}>\n                <div className={s.author_info}>\n                  {author_details.avatar_path ? (\n                    <img\n                      src={avatarHandler(author_details.avatar_path)}\n                      alt={author}\n                      className={s.avatar}\n                    />\n                  ) : (\n                    <img\n                      src=\"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n                      alt={author}\n                      className={s.avatar}\n                    />\n                  )}\n                  <div>\n                    <h4 className={s.author}>{author}</h4>\n                    <p className={s.date}>\n                      {new Date(created_at).toLocaleString('en-US', options)}\n                      {/* The toLocaleString method takes care of formatting the\n                      date and time according to the locale and options\n                      provided. This ensures that the date and time will be\n                      displayed in a format that is familiar and readable to\n                      users in the specified locale (in this case, United States\n                      English). */}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Use the 'ReactReadMoreReadLess' component for expanding and collapsing content */}\n                <ReactReadMoreReadLess\n                  charLimit={300}\n                  readMoreText={'Read more ▼'}\n                  readLessText={'Read less ▲'}\n                  readMoreClassName={s.read_more_less__more}\n                  readLessClassName={s.read_more_less__less}\n                >\n                  {content}\n                </ReactReadMoreReadLess>\n              </li>\n            )\n          )}\n        </ul>\n      ) : (\n        // Display a message if there are no reviews available\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n}\n// This React component is responsible for fetching and displaying movie reviews, and it includes the use of state, effects, and conditional rendering.\n","// Define the base URL for making API requests\nconst BASE_URL = 'https://api.themoviedb.org/3';\n// Define the API key to be used in API requests\nconst API_KEY = '?api_key=256931b667b455c0d040d58938728ff6';\n\n// Define a generic function for making API requests with error handling\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  // Send a request to the specified URL with the given configuration\n  const response = await fetch(url, config);\n  // Check if the response status is okay (HTTP status code 200)\n  return response.ok\n    ? await response.json() // If the response is okay, parse and return JSON\n    : Promise.reject(new Error('Not found')); // If not okay, reject the promise with an error\n}\n\n// Function to fetch trending movies\nexport function fetchTrendingMovies(page = '1') {\n  // Define the path parameters for trending movies\n  const PATH_PARAMS = '/trending/movie/week';\n  // Make an API request to fetch trending movies using the provided page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${API_KEY}&page=${page}`\n  );\n}\n\n// Function to fetch movies based on a search query\nexport function fetchMovies(searchQuery, page = '1') {\n  // Define the path parameters for searching movies\n  const PATH_PARAMS = '/search/movie';\n  // Define additional search parameters for language and adult content\n  const searchParams = '&language=en-US&include_adult=false';\n  // Make an API request to search for movies based on the provided query and page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${API_KEY}&query=${searchQuery}&page=${page}${searchParams}`\n  );\n}\n\n// Function to fetch details of a specific movie\nexport function fetchMovieDetails(movie_id) {\n  // Define the path parameters for fetching movie details\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch details of the specified movie\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}${API_KEY}${searchParams}`\n  );\n}\n\n// Function to fetch credits (cast and crew) of a specific movie\nexport function fetchMovieCredits(movie_id) {\n  // Define the path parameters for fetching movie credits\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch credits of the specified movie\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}/credits${API_KEY}${searchParams}`\n  );\n}\n\n// Function to fetch reviews of a specific movie\nexport function fetchMovieReviews(movie_id, page = '1') {\n  // Define the path parameters for fetching movie reviews\n  const PATH_PARAMS = '/movie/';\n  // Define additional search parameters for language\n  const searchParams = '&language=en-US';\n  // Make an API request to fetch reviews of the specified movie with the provided page\n  return fetchWithErrorHandling(\n    `${BASE_URL}${PATH_PARAMS}${movie_id}/reviews${API_KEY}${searchParams}&page=${page}`\n  );\n}\n//This module provides functions for making various requests to The Movie Database (TMDb) API, such as fetching trending movies, searching for movies, retrieving movie details, credits, and reviews.\n//The fetchWithErrorHandling function is a common utility used for handling API requests and error responses.Each function is tailored to a specific type of API request and includes necessary parameters and search options.\n"],"names":["Reviews","movieId","useParams","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","options","year","month","day","hour","minute","second","useEffect","fetchMovieReviews","then","data","results","_jsx","_Fragment","children","length","className","s","map","_ref","avatar","id","author","content","author_details","created_at","_jsxs","avatar_path","src","includes","substring","concat","alt","Date","toLocaleString","ReactReadMoreReadLess","charLimit","readMoreText","readLessText","readMoreClassName","readLessClassName","BASE_URL","API_KEY","fetchWithErrorHandling","_fetchWithErrorHandling","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","url","config","response","_args","_context","prev","next","undefined","fetch","sent","ok","json","t0","Promise","reject","Error","abrupt","stop","fetchTrendingMovies","page","PATH_PARAMS","fetchMovies","searchQuery","searchParams","fetchMovieDetails","movie_id","fetchMovieCredits"],"sourceRoot":""}